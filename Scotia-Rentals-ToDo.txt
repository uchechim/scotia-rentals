#### This file holds all bugs that I notice while developing the application.

1 - Refactor backend to be modular (follow some form of design pattern for modern flask backend applications) - DONE -> SECOND REVISION MAY BE NECESSARY (THINK GIT BRANCHES & DAVIDE COMPONENT SUGGESTIONS)

2 - Address Dependabot Alerts - TODO

3 - Update listings workflow to provide discreet renter-side & landlord-side listings. I.E -> Landlord should only be able to view their own listings - TODO

4 - Find a way to abstract/hide all secrets from application both front-end and back-end. I.E AWS Access keys, passwords e.t.c in code should not be visible in the public git repository. - DONE

5 - Fix rendering bug -> UI doesn't update properly whenever logging in. Must refresh to see the components correctly i.e Button styles e.t.c - TODO

6 - Fix bug with listings -> currently when listings(normal & favorites) are uploaded from the landlord/renter side, the correct data isn't always displayed i.e (New Listing 2 vs New Listing from Landlord_1). Look into this. - TODO

7 - Fix conflicting dependency issues on Frontend (i.e npm install requires --force tag) - TODO

8 - Fix Flake8 Linting issues - TODO

9 - Fix ESLint Linting issues (first extend linter to be compatible with redux and add custom rules pertaining to the unused imports) - TODO

10 - Add automatic logout/timeout after X hours - TODO

11 - Refactor REACT Model, Views, Controllers file/folder structure. Carefully Look into if it's implemented correctly (especially models & controllers). - TODO

12 - Figure out why on login and page refresh, the listings component doesn't trigger getListings() - DONE

13 - Logged in user should be redirected to their respective homepages after navigating to another webpage and navigating back (sessions).

14 - Signup/Signin with google. Email Verification based signup. MFA if necessary.

15 - Implement security (discord pic) + OAUTH + AWS WAF

16 - Fix Unit Tests for Payment Module once Feature is thoroughly implemented.

17 - Add integration tests

18 - Create AWS Scripts to manage services (booting up and shutting down). These scripts should be able to be executed via AWS CLI


#### Future Plans

1 - Revamp Frontend
2 - Rebrand Application (new name, new look, e.t.c)
3 - Integrate some ML/AI features to further modernize the application




#Next Project Goals:

08/12 recap:

#1) Agreed on deployment stategy and management of the endpoint PREFIX in the prefond 
    (Cache the value somewhere and inject via .env a debug state which switch between 127.0.0x and your endpoint => Make sure you have a static IP (aka: does not change each time you reboot the machine);

#2) Pivot into e2e with cypress => Above in the chat the link

#3) MAKE a 2 hours experiment to run the SAME pipeline which is passing in github action, in jenkins 
    (you can SKIP the e2e integration part);Then go into your CV and put CI/CD with Github action and Jenkins there;

#4) In your project make a functionality: Such happy birthday to my user, which runs On daily basis, and if today is an user date of birthday, send an email saying happy birthday;

--- ADDITIONAL FUNCTIONALITIES ---
#1) Enable GitGuardian

#2) Test Pipeline with code coverage - https://docs.codecov.com/docs/impact-analysis-quickstart-python

#3) Your application must be accessible via ssl (you must do manually, the ssl certificate, via openssl and certabot).

#4) Study what is a feature flag, in software engineer, and apply it to your project:
https://cfpb.github.io/django-flags/conditions/ => IN Django exists,
probably also in Flask.

#5) Profiling:
- if your project has RESTFUL apis, you must profile them using an existing
profiling library. By profiling we mean:
- Measure the number of requests done to a certain endpoint and measure
automatically its response time (performances) and report them in a
built-in dashboard. This is almost 0 code work, research + integration,
and knowing that these things exist.