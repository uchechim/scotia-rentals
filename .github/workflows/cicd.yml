name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    #Specify available containers during execution.
    #Using docker since we're dockerizing front & backend
    #privileged to allow extensive privledges within the containers
    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    #define the steps for the CI pipeline
    #1 - checkout repo to be used for pipeline (git action)
    #2 - setup docker build to build docker images (git action)
    #3 - login to docker hub (git action)
    #4 - build and push flask backend image to docker hub (docker actions)
    #5 - build and push react frontend image to docker hub (docker actions)

    #6 - run unit and integration tests within backend image (this can be split into another pipline. this cicd pipeline can depend on the "tests.yml" pipeline)
    #7 - run microsoft playwright tests within frontend image (this can be split into another pipline. this cicd pipeline can depend on the "tests.yml" pipeline)
    #8 - deploy backend and front-end to EBS and EC2.
    #9 - collect test coverage results and send to email.
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Build Action
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      #---Set Up AWS Credentials---
      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        shell: bash

      #---Backend Steps---

      # 1- build & push backend image
      - name: Build Flask Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/scotia-rentals-backend-image ./server

      - name: Push Flask Backend Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/scotia-rentals-backend-image

      # 2- run backend tests (this can be split into another pipline. this cicd pipeline can depend on the "tests.yml" pipeline)

      # 3- archive results (this can be split into another pipline. this cicd pipeline can depend on the "tests.yml" pipeline)

      # 4- Deploy backend to EBS

      #---Install Elastic Beanstalk CLI---
      - name: Install AWS Elastic Beanstalk CLI
        run: |
          pip install --upgrade --user awsebcli
          export PATH=$PATH:$HOME/.local/bin

      #---Initialize Elastic Beanstalk (non-interactive)-----
      - name: Initialize Elastic Beanstalk
        run: |
          eb init -p docker scotia-rentals-backend-app --region us-east-1

    - name: Set Timestamp
      id: timestamp
      run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    # Zip the application source code (if necessary)
    - name: Zip Application Source
      run: zip -r scotia-backend-app-${{ env.TIMESTAMP }}.zip server/

    # Upload the application version to S3
    - name: Upload Application Version to S3
      run: |
        aws s3 cp scotia-backend-app-${{ env.TIMESTAMP }}.zip s3://elasticbeanstalk-us-east-1-339712783830/scotia-rentals-backend-app/

    # Create the new application version in Elastic Beanstalk
    - name: Create Application Version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name scotia-rentals-backend-app \
          --version-label "docker-v1-${{ env.TIMESTAMP }}" \
          --source-bundle S3Bucket=elasticbeanstalk-us-east-1-339712783830,S3Key=scotia-rentals-backend-app/scotia-backend-app-${{ env.TIMESTAMP }}.zip

    # Deploy the new application version to the existing environment
    - name: Deploy Backend to Elastic Beanstalk
      run: |
        eb deploy Scotia-rentals-docker-backend-env-1 --label "docker-v1-${{ env.TIMESTAMP }}" --verbose

      #---Frontend Steps---

      # 1- build & push frontend image
      - name: Build React Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/scotia-rentals-frontend-image ./client

      - name: Push React Frontend Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME}}/scotia-rentals-frontend-image

      # 2- run frontend tests (this can be split into another pipline. this cicd pipeline can depend on the "te/sts.yml" pipeline)

      # 3- archive results (this can be split into another pipline. this cicd pipeline can depend on the "tests.yml" pipeline)

      # 4- Deploy frontend to EC2

      #---Email archived TEST Coverage results to personal email---
